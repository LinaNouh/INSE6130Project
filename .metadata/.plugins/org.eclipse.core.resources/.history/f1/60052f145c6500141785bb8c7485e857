import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Random;

public class Learner {

	//Data Set Attributes
	private int numFeatures = 3736;//how many features

	private static final int numSites = 100;//how many sites are monitored
	private static final int numInstances = 60;//how many instances per site are used for distance learning
	private static final int numTestInstances = 30;//how many instances per site are used for kNN training/testing

	private int numOpenTest = 0;//how many open instances are used for kNN training/testing
	private int numNeighbors = 1;//how many neighbors are used for kNN

	private static final int numRecPoints = 5;//how many neighbors are used for distance learning

	//Algorithm Attributes
	private Random randomGenerator = new Random();

	private float POWER = (float) 0.1; //not used in this code

	private static final int numRecoList = 10;
	private static final int numReco = 1;

	public boolean arrayContains(int e, int[] array, int len){
		for(int i = 0; i < len; i++) {
			if (array[i] == e)
				return true;
		}
		return false;
	}

	public float arrayMax(float[] array){
		float max = 0;
		for(int i=0; i<array.length;i++){
			if(array[i] > max){
				max = array[i];
			}
		}
		return max;
	}

	public int arrayMinIndex(float[] array, int startInd, int endInd){
		float min = array[startInd];
		int minInd = startInd;
		for(int i=startInd; i<endInd;i++){
			if(array[i] < min){
				min = array[i];
				minInd = i;
			}
		}
		return minInd;
	}

	//a method to randomly initialize the weight of each feature 
	public float[] initialize_weights(float[] features, float[] weights){

		for (int i = 0; i < numFeatures; i++) {
			weights[i] = (float)(randomGenerator.nextInt(100)/ 100.0 + 0.5);
		}

		return weights;
		/*float sum = 0;
		for (int j = 0; j < FEAT_NUM; j++) {
			if (abs(weight[j]) > sum) {
			sum += abs(weight[j]);
			}
		}
		for (int j = 0; j < FEAT_NUM; j++) {
			weight[j] = weight[j]/sum * 1000;
		}*/
	}

	//a method to compute the distance between two sets of features
	public float computeDistance(float[] firstFeatures, float[] secondFeatures, 
			float[] weight, float power){
		float dist = 0;
		for (int i = 0; i < numFeatures; i++) {
			if (firstFeatures[i] != -1 && secondFeatures[i] != -1) {
				dist += weight[i] * Math.abs(firstFeatures[i] - secondFeatures[i]);
			}
		}
		return dist;
	}

	public void recommend(int beginning, int ending, ArrayList<float[]> features, float[] weights){

		float[] distanceList = new float[numSites * numInstances];
		int[] goodListRec = new int[numRecPoints];
		int[] badListRec = new int[numRecPoints];

		for(int i=0; i<ending;i++){
			System.out.println("Learning distance..."+i+" "+(beginning - ending));
			int currentSite = i/numInstances;
			int currentInstance = i % numInstances;

			float badness = 0;
			float goodDistMax = 0;

			for(int j=0;j<numSites * numInstances; j++){
				distanceList[j] = computeDistance(features.get(i), features.get(j), weights, POWER);
			}

			float max = arrayMax(distanceList);
			distanceList[i] = max;

			for(int j = 0; j < numRecPoints; j++) {
				int minInd = arrayMinIndex(distanceList,currentSite*numInstances,(currentSite+1)*numInstances);
				if (distanceList[minInd] > goodDistMax) 
					goodDistMax = distanceList[minInd];
				distanceList[minInd] = max;
				goodListRec[j] = minInd;
			}

			for (int j = 0; j < numInstances; j++) {
				distanceList[currentSite*numInstances+j] = max;
			}

			for (int j = 0; j < numRecPoints; j++) {
				int minInd = arrayMinIndex(distanceList,0,numInstances*numSites);//find index of min element within range
				if (distanceList[minInd] <= goodDistMax) 
					badness += 1;
				distanceList[minInd] = max;
				badListRec[j] = minInd;
			}

			badness /= (float)numRecPoints;
			badness += 0.2;

			/*
			if (i == 0) {
				float gooddist = 0;
				float baddist = 0;
				printf("Current point: %d\n", i);
				printf("Bad points:\n");
				for (int k = 0; k < RECOPOINTS_NUM; k++) {
					printf("%d, %f\n", recobadlist[k], dist(feat[i], feat[recobadlist[k]], weight, POWER));	
					baddist += dist(feat[i], feat[recobadlist[k]], weight, POWER);
				}

				printf("Good points:\n");
				for (int k = 0; k < RECOPOINTS_NUM; k++) {
					printf("%d, %f\n", recogoodlist[k], dist(feat[i], feat[recogoodlist[k]], weight, POWER));
					gooddist += dist(feat[i], feat[recogoodlist[k]], weight, POWER);
				}

				printf("Total bad distance: %f\n", baddist);
				printf("Total good distance: %f\n", gooddist);
			}*/

			float[] featuresDist = new float[numFeatures];
			//initializing distances to 0
			for (int f = 0; f < featuresDist.length; f++) {
				featuresDist[f] = 0;
			}

			int[] badList = new int[numFeatures];
			int badListMin = 0;
			int badListCount = 0;

			for (int f = 0; f < numFeatures; f++) {
				if (weights[f] == 0){ 
					badList[f] = 0;
				}else{
					float goodMax = 0;
					int badCount = 0;
					for (int k = 0; k < numRecPoints; k++) {
						float n = Math.abs(features.get(i)[f] - features.get(goodListRec[k])[f]);
						if (features.get(i)[f] == -1 || features.get(badListRec[k])[f] == -1) 
							n = 0;
						if (n >= goodMax) 
							goodMax = n;
					}
					
					for (int k = 0; k < numRecPoints; k++) {
						float n = Math.abs(features.get(i)[f] - features.get(badListRec[k])[f]);
						if (features.get(i)[f] == -1 || features.get(badListRec[k])[f] == -1) 
							n = 0;
						featuresDist[f] += n;
						if (n <= goodMax) badCount += 1;
					}
					
					badList[f] = badCount;
					if (badCount < badListMin) 
						badListMin = badCount;
				}
			}
			
			for (int f = 0; f < numFeatures; f++) {
				if (badList[f] != badListMin) 
					badListCount += 1;
			}
			
			int[] w0id = new int[badListCount];
			float[] change = new float[badListCount];
			int temp = 0;
			float C1 = 0;
			float C2 = 0;
			
			for (int f = 0; f < numFeatures; f++) {
				if (badList[f] != badListMin) {
					w0id[temp] = f;
					change[temp] = (float) (weights[f] * 0.01 * badList[f]/(float)numRecPoints * badness);
					//if (change[temp] < 1.0/1000) change[temp] = weight[f];
					C1 += change[temp] * featuresDist[f];
					C2 += change[temp];
					weights[f] -= change[temp];
					temp += 1;
				}
			}
			
			float totalfd = 0;
			for (int f = 0; f < numFeatures; f++) {
				if (badList[f] == badListMin && weights[f] > 0) {
					totalfd += featuresDist[f];
				}
			}
			
			for (int f = 0; f < numFeatures; f++) {
				if (badList[f] == badListMin && weights[f] > 0) {
					weights[f] += C1/(totalfd);
				}
			}
			
			//featuresDist = null;
			//w0id = null;
			//change = null;
			//badList = null;
			
		}
		
		Random randomGenerator = new Random();
		for (int j = 0; j < numFeatures; j++) {
			if (weights[j] > 0)
				weights[j] *= (0.9 + randomGenerator.nextInt(100) / 500.0);
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
